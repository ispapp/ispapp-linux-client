#!/usr/bin/env lua

-- ispapp daemon
-- path: /bin/ispappd
local nixio = require "nixio"
local uci = require"luci.model.uci".cursor()
local ubus = require "ubus"
local jsonc = require "luci.jsonc"
local conn = ubus.connect()
-- Variables to manage threads and their respective sleep times
local threads = {}
local running = false
local sleep_times = {
    update_interval = 10, -- Default sleep time for WISP monitor (10s minimum)
    config_interval = 10, -- Default sleep time for connection manager (10s minimum)
    heathcheck_interval = 10 -- Default sleep time for status reporter (10s minimum)
}
local pid_file = "/var/run/ispappd.pid"
local log_file = "/var/log/ispapp" -- Log file path no used in this script
local max_log_size = 0.1 * 1024 * 1024 -- 0.1 MB

-- Function to log messages to the log file with rotation
local function log_to_syslog(level, message) nixio.syslog(level, message) end
-- priority Priority ["emerg", "alert", "crit", "err", "warning", "notice", "info", "debug"] 
local function log(message) log_to_syslog("debug", "[ispappd]: " .. message) end

-- Function to load configuration and get sleep times for each thread
local function load_config()
    local UpdateInterval = uci:get("ispapp", "@settings[0]", "updateInterval")
    -- Ensure minimum 10s and assign to variables
    if UpdateInterval then
        UpdateInterval = tonumber(UpdateInterval)
        if UpdateInterval and UpdateInterval >= 10 then
            sleep_times.update_interval = UpdateInterval
            sleep_times.config_interval = UpdateInterval + 5
            sleep_times.heathcheck_interval = UpdateInterval
        else
            sleep_times.update_interval = 10
            sleep_times.config_interval = 15
            sleep_times.heathcheck_interval = 10
        end
    else
        uci:set("ispapp", "@settings[0]", "UpdateInterval", 10) -- Save default if missing
    end

    -- Commit the changes if defaults were saved
    uci:commit("ispapp")
end

-- Thread 1: WISP monitoring task
local function Update_thread()
    local count = 0
    while running do
        count = count + 1
        log("Sending updates ..." .. " count: " .. count)
        local update = conn:call("ispapp", "update", {})
        local sentupdate = conn:call("ispapp", "sendupdate", {})
        local terminal = conn:call("ispapp", "terminal", {})
        if terminal and terminal.code == 200 then
            log("Terminal sent successfully" .. " count: " .. count)
        else
            log("Failed to send terminal" .. " count: " .. count)
        end
        if sentupdate and sentupdate.code == 200 then
            log("Sent update successfully" .. " count: " .. count)
        else
            log("Failed to send update" .. " count: " .. count)
        end
        if update and update.code == 200 then
            log("Update retreived successfully" .. " count: " .. count)
        else
            log("Failed to retreive update" .. " count: " .. count)
        end
        nixio.nanosleep(sleep_times.update_interval, 0) -- Sleep for the configured time
    end
    coroutine.yield() -- Yield execution back to the manager
end

-- Thread 2: Connection management task
local function Config_thread()
    local count = 0
    while running do
        count = count + 1
        log("Sending configs..." .. " count: " .. count)
        local config = conn:call("ispapp", "config", {})
        if config and config.code == 200 then
            log("Config sent successfully" .. " count: " .. count)
        else
            log("Failed to send config" .. " count: " .. count)
        end
        nixio.nanosleep(sleep_times.config_interval, 0) -- Sleep for the configured time
    end
    coroutine.yield() -- Yield execution back to the manager
end

-- Thread 3: Status reporting task
local function HealthCheck_thread()
    local count = 0
    while running do
        count = count + 1
        log("Reporting heath check..." .. " count: " .. count)
        local health = conn:call("ispapp", "checkconnection", {})
        if health and health.code == 200 then
            log("Health check reported successfully" .. " count: " .. count)
        else
            log("Failed to report health check" .. " count: " .. count)
            log("heath error..." ..
                    (health and jsonc.stringify(health) or "no error"))
        end
        nixio.nanosleep(sleep_times.heathcheck_interval * 10, 0) -- Sleep for the configured time
    end
    coroutine.yield() -- Yield execution back to the manager
end

-- Function to start the daemon and all coroutines
local function start_daemon()
    running = true
    log("Starting ispappd daemon...")
    -- Load the sleep times from config
    load_config()
    log(
        "Thread Sleep Times: update interval = " .. sleep_times.update_interval ..
            " s, " .. "config interval = " .. sleep_times.config_interval ..
            " s, " .. "heath check interval = " ..
            sleep_times.heathcheck_interval .. " s")

    -- Create coroutines (threads)
    threads[1] = coroutine.create(Update_thread)
    threads[2] = coroutine.create(Config_thread)
    threads[3] = coroutine.create(HealthCheck_thread)

    -- Manage threads in a round-robin fashion
    while running do
        for _, thread in ipairs(threads) do
            if coroutine.status(thread) == "suspended" then
                coroutine.resume(thread)
            end
        end
        nixio.nanosleep(0, 100000000) -- Short sleep to avoid tight loop
    end
end

-- Function to stop the daemon
local function stop_daemon()
    running = false
    log("Stopping ispappd daemon...")
end

-- Function to daemonize the process
local function daemonize()
    local pid = nixio.fork()
    if pid > 0 then
        -- Parent process: exit to let the child run in the background
        os.exit(0)
    else
        -- Child process: become session leader and fork again
        nixio.setsid()
        pid = nixio.fork()
        if pid > 0 then
            -- Exit the first child to allow the second to run in the background
            os.exit(0)
        end
    end

    -- In the final child process, write the PID to a file
    local pid_file_handle = io.open(pid_file, "w")
    if pid_file_handle then
        pid_file_handle:write(nixio.getpid())
        pid_file_handle:close()
    end
end
-- cleanup child process with ps:
local CleanUp = function()
    local status = conn:call("ispapp", "cleanup", {})
    if status and status.status then
        log("CleanUp successfully")
    else
        log("Failed to CleanUp" .. "error: " ..
                (status and jsonc.stringify(status) or "no error"))
    end
end
-- Function to restart the daemon
local function restart_daemon()
    stop_daemon()
    nixio.nanosleep(1, 0) -- Sleep for 1 second before restarting
    start_daemon()
end

-- Main execution logic for init.d and service management
local action = arg[1]
if action == "start" then
    -- Start the service by daemonizing it
    -- daemonize()
    CleanUp()
    start_daemon()
    log("ispappd started.")
elseif action == "stop" then
    stop_daemon()
    CleanUp()
    log("ispappd stopped.")
elseif action == "restart" then
    restart_daemon()
    log("ispappd restarted.")
else
    log("Usage: ispappd {start|stop|restart}")
end
