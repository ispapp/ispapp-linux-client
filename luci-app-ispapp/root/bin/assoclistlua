
local function print_usage()
    print("Usage: " .. arg[0] .. " <device_name>")
    os.exit(1)
end

if #arg < 1 then
    print_usage()
end

local device_name = arg[1]

local function command_exists(cmd)
    local handle = io.popen("command -v " .. cmd .. " >/dev/null 2>&1 && echo 1 || echo 0")
    local result = handle:read("*a")
    handle:close()
    return result:match("1")
end

if not command_exists("wlanconfig") then
    print("[]")
    os.exit(0)
end

local first_station = true

local function print_station(station)
    if not first_station then
        io.write(",\n")
    end
    first_station = false
    io.write("{")
    local first_field = true
    for key, value in pairs(station) do
        if not first_field then
            io.write(",")
        end
        first_field = false
        io.write(string.format("\"%s\": \"%s\"", key, value))
    end
    io.write("}")
end

local function parse_station_line(line)
    local fields = {}
    for field in line:gmatch("%S+") do
        table.insert(fields, field)
    end
    return {
        addr = fields[1],
        aid = fields[2],
        chan = fields[3],
        txrate = fields[4],
        rxrate = fields[5],
        rssi = fields[6],
        minrssi = fields[7],
        maxrssi = fields[8],
        idle = fields[9],
        txseq = fields[10],
        rxseq = fields[11],
        caps = fields[12],
        xcaps = fields[13],
        acaps = fields[14],
        erp = fields[15],
        state = fields[16],
        maxrate_dot11 = fields[17],
        htcaps = fields[18],
        vhtcaps = fields[19],
        assoctime = fields[20],
        ies = fields[21]
    }
end

local function parse_additional_info(line, station)
    if line:find("RSSI is combined over chains in dBm") then
        station["rssi_combined"] = "true"
    elseif line:find("Minimum Tx Power") then
        station["min_tx_power"] = line:match(": (.+)")
    elseif line:find("Maximum Tx Power") then
        station["max_tx_power"] = line:match(": (.+)")
    elseif line:find("HT Capability") then
        station["ht_capability"] = line:match(": (.+)")
    elseif line:find("VHT Capability") then
        station["vht_capability"] = line:match(": (.+)")
    elseif line:find("MU capable") then
        station["mu_capable"] = line:match(": (.+)")
    elseif line:find("SNR") then
        station["snr"] = line:match(": (.+)")
    elseif line:find("Operating band") then
        station["operating_band"] = line:match(": (.+)")
    elseif line:find("Current Operating class") then
        station["current_operating_class"] = line:match(": (.+)")
    elseif line:find("Supported Operating classes") then
        station["supported_operating_classes"] = line:match(": (.+)")
    elseif line:find("Supported Rates%(Mbps%)") then
        station["supported_rates"] = line:match(": (.+)")
    elseif line:find("Max STA phymode") then
        station["max_sta_phymode"] = line:match(": (.+)")
    elseif line:find("MLO") then
        station["mlo"] = line:match(": (.+)")
    elseif line:find("MLD Addr") then
        station["mld_addr"] = line:match(": (.+)")
    elseif line:find("Num Partner links") then
        station["num_partner_links"] = line:match(": (.+)")
    elseif line:find("Partner link") then
        station["partner_links"] = (station["partner_links"] or "") .. " " .. line:match(": (.+)")
    elseif line:find("EMLSR capable") then
        station["emlsr_capable"] = line:match(": (.+)")
    elseif line:find("EMLMR capable") then
        station["emlmr_capable"] = line:match(": (.+)")
    elseif line:find("STR capable") then
        station["str_capable"] = line:match(": (.+)")
    end
end

print("[")

local handle = io.popen("wlanconfig " .. device_name .. " list")
local station = nil

for line in handle:lines() do
    if line:match("^[0-9a-fA-F:]+") then
        if station then
            print_station(station)
        end
        station = parse_station_line(line)
    elseif station then
        parse_additional_info(line, station)
    end
end

if station then
    print_station(station)
end

handle:close()

print("]")